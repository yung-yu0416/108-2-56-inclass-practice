levels(covid19$`縣市`)
table(covid19$`縣市`) -> table_covid19
names(sort(table_covid19, decreasing=T)) -> NewLevels
print(population)
covid19$`縣市` <- factor(covid19$`縣市` , levels = NewLevels)
levels(covid19$`縣市`)
table(covid19$`縣市`) -> table_covid19
names(sort(table_covid19, decreasing=T)) -> NewLevels
print(population)
covid19$`縣市` <- factor(covid19$`縣市` , levels = NewLevels)
levels(covid19$`縣市`)
table(covid19$`縣市`)
table(covid19$`縣市`) -> table_covid19
names(sort(table_covid19, decreasing=T)) -> NewLevels
print(population)
covid19$`縣市` <- factor(covid19$`縣市` , levels = NewLevels)
levels(covid19$`縣市`)
table(covid19$`縣市`)
table(covid19$`縣市`) -> table_covid19
names(sort(table_covid19, decreasing=T)) -> NewLevels
covid19$`縣市` <- factor(covid19$`縣市` , levels = NewLevels)
levels(covid19$`縣市`)
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
level_names <- levels(covid19$`年齡層`)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
level_names <- levels(covid19$`年齡層`)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
startingAges
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
startingAges
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
startingAges
level_names
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
level_names
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
startingAges
levels(covid19$年齡層)
covid19$`年齡層` <-
factor(
covid19$`年齡層`, names(startingAges)
)
levels(covid19$`年齡層`)
covid19$`年齡層` <-
factor(
covid19$`年齡層`, names(startingAges)
)
levels(covid19$`年齡層`)
covid19$`年齡層` <-
factor(
covid19$`年齡層`, names(startingAges)
)
levels(covid19$`年齡層`)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1)
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
levels(covid19$`地區`)
covid19$`地區` <- covid19$`縣市`
levels(covid19$`地區`)
currentLevels <- levels(covid19$`地區`)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$`地區`) <- newLevels
covid19$`地區`
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
levels(factor2)[[4]] <- "尚可"
factor2[[7]] <- "尚可"
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
levels(factor2)[[4]] <- "尚可"
factor2[[7]] <- "尚可"
factor2
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
factor1[4:6] <- factor2
factor1
forcats::fct_c(factor1, factor2)
levels(covid19$`性別`)
levels(covid19$`性別`)
levels(covid19$`性別`) <- c("Male", "Female")
levels(covid19$`性別`)
levels(covid19$`性別`) <- c("Male", "Female")
levels(covid19$`性別`)
levels(covid19$`性別`) <- c("Male", "Female")
levels(covid19$`性別`)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
knitr::opts_chunk$set(echo = TRUE)
levels(covid19$`性別`)
covid19$`性別` <- factor(covid19$`性別`, c("男","女"))
knitr::opts_chunk$set(echo = TRUE)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
table(covid19$`縣市`)
table(covid19$`縣市`) -> table_covid19
names(sort(table_covid19, decreasing=T)) -> NewLevels
covid19$`縣市` <- factor(covid19$`縣市` , levels = NewLevels)
levels(covid19$`縣市`)
knitr::opts_chunk$set(echo = TRUE)
names(sort(table_covid19, decreasing=T)) -> NewLevels
NewLevels
sort(table_covid19, decreasing=T) -> NewLevels
NewLevels
knitr::opts_chunk$set(echo = TRUE)
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
datefinal <-
lubridate::ymd(twDate_reformat)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
install.packages("purrr")
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
pick_`小新` <- example$name == "小新"
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
str(dance)
View(dance)
View(dance)
map(dance, ~.x$title) ->
list_titles
View(list_titles)
View(dance)
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
str(dance[[4]]$showInfo)
# 這個表演第1個場次的訊息
dance[[4]]$showInfo[[1]]$time
# 這個表演第2個場次的訊息
dance[[4]]$showInfo[[2]]$time
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
str(dance)
# 第一個dance表演名稱
dance[[1]]$title
# 第二個dance表演名稱
dance[[2]]$title
map(dance, ~.x$title) ->
list_titles
View(list_titles)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
str(dance)
# 第一個dance表演名稱
dance[[1]]$title
# 第二個dance表演名稱
dance[[2]]$title
map(dance, ~.x$title) ->
list_titles
View(list_titles)
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
str(dance[[4]]$showInfo)
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
View(list_showTimes_dance4)
map(dance[[8]]$showInfo, ~.x$time) -> list_showTimes_dance8
list_showTimes_dance8
map(dance[[8]]$showInfo, ~.x$time) -> list_showTimes_dance8
map(dance[[8]]$showInfo, ~.x$location) -> list_showLocation_dance8
list_showTimes_dance8
list_showLocation_dance8
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview", simplifyDataFrame = F) -> busRoutes
str(busRoutes)
View(busRoutes)
View(busRoutes)
map(busRoutes, ~.x$Id)
View(busRoutes)
map(busRoutes, ~.x$Id) -> list_RoutesId
View(busRoutes)
map(busRoutes, ~.x$Id) -> list_RoutesId
list_RoutesId
list_RoutesproviderId
str(busRoutes)
str(busRoutes)
View(busRoutes)
map(busRoutes, ~.x$Id) -> list_RoutesId
list_RoutesId
map(busRoutes, ~.x$providerId) -> list_RoutesproviderId
list_RoutesproviderId
View(busRoutes)
map(busRoutes, ~.x$Id) -> list_RoutesId
list_RoutesId
map(busRoutes, ~.x$providerId) -> list_RoutesproviderId
list_RoutesproviderId
list_RoutesproviderId
list_RoutesId
map(busRoutes, ~.x$providerName) -> list_RoutesproviderName
list_RoutesproviderName
list_RoutesnameZh
map(busRoutes, ~.x$nameZh) -> list_RoutesnameZh
list_RoutesnameZh
map(busRoutes, ~.x$nameZh) -> list_RoutesnameZh
list_RoutesnameZh
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
View(weather_next36hours)
weather_next36hours$cwbopendata$dataset$location
View(weather_next36hours)
weather_next36hours$cwbopendata$dataset$location$locationName
weather_next36hours$cwbopendata$dataset$location$locationName
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$elementName
View(weather_next36hours)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement, ~.x$elementName)
# 這段時間的最高氣溫
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter$parameterValue
# 這段時間的最高氣溫
max(weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter$parameterValue)
# 這段時間的最高氣溫
max(weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter$parameterValue)
# 這段時間的最高氣溫
max(as.integer(weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter$parameterValue))
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
install.packages("magrittr")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
f(w) -> x
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
library(stringr)
region <- cities
library(stringr)
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
regionLevels
num <- c(2,97,22,15,7)
# 選出大於50的數字
(num > 50) -> pick_big
num[pick_big]
(num > 50) %>%
num[.]
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
levels(region) %>%
str_replace("台北","北部") %>%
str_replace("花蓮|台東","東部") %>%
str_replace("台中","中部") ->
levels(region)
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
library(purrr)
library(purrr)
map(dataList, is.numeric) -> results
unlist(results) -> pick_numeric
dataList[pick_numeric] -> num_element
(num_element[[1]] > 50) -> pick_big
num_element[[1]][pick_big] -> bigNumber
