# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
str(dance[[4]]$showInfo)
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
View(list_showTimes_dance4)
map(dance[[8]]$showInfo, ~.x$time) -> list_showTimes_dance8
list_showTimes_dance8
map(dance[[8]]$showInfo, ~.x$time) -> list_showTimes_dance8
map(dance[[8]]$showInfo, ~.x$location) -> list_showLocation_dance8
list_showTimes_dance8
list_showLocation_dance8
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview", simplifyDataFrame = F) -> busRoutes
str(busRoutes)
View(busRoutes)
View(busRoutes)
map(busRoutes, ~.x$Id)
View(busRoutes)
map(busRoutes, ~.x$Id) -> list_RoutesId
View(busRoutes)
map(busRoutes, ~.x$Id) -> list_RoutesId
list_RoutesId
list_RoutesproviderId
str(busRoutes)
str(busRoutes)
View(busRoutes)
map(busRoutes, ~.x$Id) -> list_RoutesId
list_RoutesId
map(busRoutes, ~.x$providerId) -> list_RoutesproviderId
list_RoutesproviderId
View(busRoutes)
map(busRoutes, ~.x$Id) -> list_RoutesId
list_RoutesId
map(busRoutes, ~.x$providerId) -> list_RoutesproviderId
list_RoutesproviderId
list_RoutesproviderId
list_RoutesId
map(busRoutes, ~.x$providerName) -> list_RoutesproviderName
list_RoutesproviderName
list_RoutesnameZh
map(busRoutes, ~.x$nameZh) -> list_RoutesnameZh
list_RoutesnameZh
map(busRoutes, ~.x$nameZh) -> list_RoutesnameZh
list_RoutesnameZh
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
View(weather_next36hours)
weather_next36hours$cwbopendata$dataset$location
View(weather_next36hours)
weather_next36hours$cwbopendata$dataset$location$locationName
weather_next36hours$cwbopendata$dataset$location$locationName
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$elementName
View(weather_next36hours)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement, ~.x$elementName)
# 這段時間的最高氣溫
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter$parameterValue
# 這段時間的最高氣溫
max(weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter$parameterValue)
# 這段時間的最高氣溫
max(weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter$parameterValue)
# 這段時間的最高氣溫
max(as.integer(weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter$parameterValue))
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
install.packages("magrittr")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
f(w) -> x
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
library(stringr)
region <- cities
library(stringr)
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
regionLevels
num <- c(2,97,22,15,7)
# 選出大於50的數字
(num > 50) -> pick_big
num[pick_big]
(num > 50) %>%
num[.]
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
levels(region) %>%
str_replace("台北","北部") %>%
str_replace("花蓮|台東","東部") %>%
str_replace("台中","中部") ->
levels(region)
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
library(purrr)
library(purrr)
map(dataList, is.numeric) -> results
unlist(results) -> pick_numeric
dataList[pick_numeric] -> num_element
(num_element[[1]] > 50) -> pick_big
num_element[[1]][pick_big] -> bigNumber
knitr::opts_chunk$set(echo = TRUE)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
.Last.value
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
demand_return(1.2) # 相當於
4
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
q_d <- 5
demand_return(p=1.2)
print(q_d)
supply_curve <-
function(p){
q_s <- 0+2*p
return(q_s)
}
supply_return <-
function(p){
q_s <- 0+2*p
return(q_s)
}
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
demand_return(1.2) # 相當於
4
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
q_d <- 5
demand_return(p=1.2)
print(q_d)
supply_return <-
function(p){
q_s <- 0+2*p
return(q_s)
}
dateInput <- today()
library(lubridate)
dateInput <- today()
locationInput <- "新北市"
library(lubridate)
dateInput <- today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
askSilly_weather("臺中市",today())
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市",today())
askSilly_weather("花蓮縣",today())
now()
what_time_it_is <- function(zone){
time <- with_tz(now(), tz=zone)
}
what_time_it_is("Europe/Paris")
what_time_it_is <- function(zone){
time <- with_tz(now(), tz=zone)
}
what_time_it_is("Europe/Paris")
what_time_it_is <- function(zone){
time <- with_tz(now(), tz=zone)
return(time)
}
what_time_it_is("Europe/Paris")
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
demand_return(1.2) # 相當於
4
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
q_d <- 5
demand_return(p=1.2)
print(q_d)
supply_return <-
function(p){
q_s <- 0+2*p
return(q_s)
}
library(lubridate)
dateInput <- today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市",today())
askSilly_weather("花蓮縣",today())
now()
what_time_it_is <- function(zone){
time <- with_tz(now(), tz=zone)
return(time)
}
what_time_it_is("Europe/Paris")
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return) #電腦如何存物件
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
# 移除global environment裡的intercept及slope
rm(intercept, slope)
demand_return(1.2) # 維持正常運作
myDemand(1.2) # 無法運作
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
intercept <- 5
slope <- -1.2
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
environment(myDemand2)
codetools::findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
View(busStopsInfo)
when_busArrives("916","臺北大學正門")
View(busArrivalForecast)
View(busRoutes)
View(busStopsInfo)
View(busArrivalForecast)
busRoutes$Id
busRoutes$Id[[26]]
busRoutes$nameZh
busRoutes$nameZh[[26]]
jsonlite::fromJSON("	https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("	https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://www-ws.gov.taipei/001/Upload/458/relfile/10173/7975051/5686049c-7280-4454-abf5-e4e135ee37de") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://www-ws.gov.taipei/001/Upload/458/relfile/10173/7975051/5686049c-7280-4454-abf5-e4e135ee37de/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://www-ws.gov.taipei/001/Upload/458/relfile/10173/7975051/5686049c-7280-4454-abf5-e4e135ee37de/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
View(busArrivalForecast)
busArrivalForecast$BusInfo[[20]]
busArrivalForecast$BusInfo[[3]]
busArrivalForecast$BusInfo$StopID
busArrivalForecast$BusInfo$RouteID
jsonlite::fromJSON("	https://tcgbusfs.blob.core.windows.net/blobbus/GetRoute.gz") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
View(busArrivalForecast)
busRoutes$nameZh[[14]]
busRoutes$nameZh[[14]][[2]]
library(stringr)
str_detect(busRoutes = 916)
str_detect(busRoutes == 916)
str_detect(busRoutes$providerName == 916)
str_detect(busRoutes$nameZh == 916)
library(stringr)
str_detect(busRoutes$nameZh == 916)
name <- str_detect(busRoutes$nameZh == 916)
name <- stringr:: str_detect(busRoutes$nameZh == 916)
name <- stringr::str_detect(busRoutes$nameZh == 916)
name <- stringr::str_detect(busRoutes$nameZh, 916)
library(stringr)
name <- stringr::str_detect(busRoutes$nameZh, 916)
name <- stringr::str_detect(busRoutes$nameZh, "916")
name
name <- stringr::str_detect(busRoutes$pathAttributeId, "916")
name
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
